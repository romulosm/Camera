import React, { useState, useEffect, useRef } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, SafeAreaView, Modal, Image } from 'react-native';
import { Camera } from 'expo-camera';
import { IconButton } from 'react-native-paper';
import { FontAwesome } from '@expo/vector-icons';
import * as Permissions from 'expo-permissions';
import * as MediaLibrary from 'expo-media-library';

export default function camera({ route, navigation }) {
  const rota = route.params.route;
  const tipo = route.params.tipo;
  const camRef = useRef(null);
  const [hasPermission, setHasPermission] = useState(null);
  const [type, setType] = useState(Camera.Constants.Type.back);
  const [capturedPhoto, setCapturedPhoto] = useState(null);
  const [open, setOpen] = useState(null);


  useEffect(() => {
    (async () => {
      const { status } = await Camera.requestPermissionsAsync();
      setHasPermission(status === 'granted');
    })();
    (async () => {
      const { status } = await Permissions.askAsync(Permissions.MEDIA_LIBRARY);
      setHasPermission(status === 'granted');
    })();
  }, []);

  if (hasPermission === null) {
    return <View />;
  }
  if (hasPermission === false) {
    return <Text>Sem permissão para acessar a câmera</Text>;
  }

  async function takePicture() {
    if (camRef) {
      const data = await camRef.current.takePictureAsync();
      setCapturedPhoto(data.uri)
      setOpen(true);
    }
  }

  async function savePicture() {
    const asset = await MediaLibrary.createAssetAsync(capturedPhoto)
      .then(() => {
        //alert("Salvo na galeria com sucesso!");
        navigation.navigate(rota, { foto: capturedPhoto, tipo: tipo });
        setOpen(false);
      })
      .catch((error) => {
        console.log('err', error);
      });
  }

  return (
    <SafeAreaView style={styles.container}>
      <Camera style={styles.camera} type={type} ref={camRef} ratio={"16:9"} >
        <View style={styles.buttonContainer}>
          <TouchableOpacity
            style={styles.button}
            onPress={() => {
              setType(
                type === Camera.Constants.Type.back
                  ? Camera.Constants.Type.front
                  : Camera.Constants.Type.back
              );
            }}>
            <IconButton
              icon="autorenew"
              size={40}
              color="white"
            />
          </TouchableOpacity>
        </View>

        <TouchableOpacity style={styles.buttonCamera} onPress={takePicture}>
          <FontAwesome name="camera" size={50} color="#FFF" />
        </TouchableOpacity>
      </Camera>
      {
        capturedPhoto &&
        <Modal animationType="slide" transparent={false} visible={open}>
          <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', margin: 20 }}>
            <Image style={{ width: '100%', height: 600, borderRadius: 20 }}
              source={{ uri: capturedPhoto }} />
            <View style={{ margin: 10, flexDirection: "row" }}>
              <TouchableOpacity style={{ margin: 10 }} onPress={() => setOpen(false)}>
                <FontAwesome name="window-close" size={50} color="#ff0000" ></FontAwesome>
              </TouchableOpacity>
              <TouchableOpacity style={{ margin: 10 }} onPress={savePicture}>
                <FontAwesome name="upload" size={50} color="#121212" ></FontAwesome>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      }
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    backgroundColor: 'transparent',
    flexDirection: 'row',
    margin: 20,
  },
  button: {
    flex: 0.1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  buttonCamera: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: "#121212",
    margin: 20,
    borderRadius: 10,
    height: 50,
    backgroundColor: 'transparent'
  },
  text: {
    fontSize: 18,
    color: 'white',
  },
});
